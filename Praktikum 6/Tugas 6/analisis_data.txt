Menurut analisa saya terhadap tugas Pemrograman Dasar I kali ini adalah sebagai berikut:
Tugas 1 yaitu membuat fungsi kabisat() yang akan memberikan nilai balik 1 bila tahun adalah kabisat, dan 0 bila tahun bukan kabisat. Terdapat fungsi kabisat() dengan parameter tahun yang di dalamnya terdapat pengkondisian, dimana jika tahun habis dibagi 400, maka mengembalikan nilai 1. Jika tahun tidak habis dibagi 400 tetapi habis dibagi 100, maka mengembalikan nilai 0. Jika tahun tidak habis dibagi 400 dan tidak habis dibagi 100 tetapi habis dibagi 4, maka mengembalikan nilai 1.

Tugas 2 yaitu membuat fungsi factorial() untuk menghitung nilai factorial, Fungsi faktorial() memberikan nilai balik bertipe long int yang akan dicetak ke layar dalam fungsi main(). Jika n tidak sama dengan 0, maka faktorial dari n adalah hasil perkalian n dengan faktorial dari n - 1. Fungsi faktorial() memanggil dirinya sendiri dengan nilai argumen yang lebih kecil satu. Proses ini akan terus berlanjut hingga nilai argumen mencapai 0. Jika nilai parameter n sama dengan 0, maka fungsi faktorial() akan mengembalikan nilai 1.

Tugas 3 yaitu membuat fungsi permutasi() dan kombinasi() untuk menghitung permutasi dan kombinasi dari suatu pasangan bilangan. Disini, ditambahkan fungsi factorial() untuk mempermudah proses perhitungan. Faktorial dari suatu bilangan n adalah hasil perkalian semua bilangan bulat positif dari 1 hingga n. Pada permutation() dan combination() terdapat pengkondisian dimana jika n < r, maka mengembalikan nilai 0. Pada permutation() akan mengembalikan nilai faktorial dari n dibagi faktorial dari n – r. Pada combination() akan mengembalikan nilai faktorial dari n dibagi faktorial dari r dikali faktorial dari n – r.

Tugas 4 yaitu membuat fungsi float suhu (s, d), untuk mengkonversikan suhu dari Celsius ke Fahrenheit, Celsius ke Reamur, Fahrenheit ke Celsius, Fahrenheit ke Reamur, Reamur ke Celsius, dan Reamur ke Fahrenheit. Dimana s adalah suhu sumber, d adalah suhu konversi, dan suhu() adalah hasil konversi suhu. Terdapat fungsi temperature() yang memiliki dua parameter yaitu suhu yang akan dikonversi (s) dan skala tujuan (d). Digunakan statement switch untuk mengeksekusi kode yang berbeda-beda tergantung pada nilai dari variabel d. Jika d == ‘C’ , maka fungsi tersebut akan mengembalikan nilai suhu saat ini (s). Jika d == 'F', maka fungsi tersebut akan mengembalikan hasil konversi suhu dari Celsius ke Fahrenheit menggunakan rumus (s * 9 / 5) + 32. Jika d == 'R', maka fungsi tersebut akan mengembalikan hasil konversi suhu dari Celsius ke Reamur menggunakan rumus s * 4 / 5. Jika d tidak sama dengan salah satu dari nilai di atas, maka fungsi tersebut akan mengembalikan nilai 0.

Tugas 5 yaitu membuat fungsi prima(), yang memberikan nilai balik 1 bila bilangan yang dimasukkan adalah prima, dan 0 bila bukan bilangan prima. Pada fungsi prima() terdapat parameter i yang dimana jika i adalah 0 atau 1, maka fungsi tersebut akan mengembalikan nilai 0, karena 0 dan 1 bukan bilangan prima. Jika i adalah 2, maka fungsi tersebut akan mengembalikan nilai 1, karena 2 adalah bilangan prima. Jika i > 2, maka fungsi tersebut akan melakukan perulangan dari bilangan 2 hingga bilangan tersebut - 1. Pada setiap iterasi perulangan, fungsi tersebut akan memeriksa apakah i habis dibagi oleh bilangan yang sedang diulang. Jika habis dibagi, maka fungsi tersebut akan mengembalikan nilai 0, karena bilangan tersebut bukan bilangan prima. Jika tidak habis dibagi, maka perulangan akan dilanjutkan. Jika perulangan selesai tanpa menemukan bilangan yang habis membagi bilangan yang sedang diperiksa, maka fungsi tersebut akan mengembalikan nilai 1, karena bilangan tersebut adalah bilangan prima.

Tugas 6 yaitu membandingkan waktu eksekusi variabel register dan  variabel integer menggunakan dua for() dan fungsi gettime(). Variabel i dideklarasikan sebagai variabel register, sedangkan variabel j dideklarasikan sebagai variabel integer biasa. Variabel start dan end digunakan untuk menyimpan waktu awal dan waktu akhir dari perulangan. Variabel cpu_time_used digunakan untuk menyimpan waktu yang diperlukan untuk melakukan perulangan. fungsi gettimeofday() untuk mendapatkan waktu saat ini dan menyimpannya ke variabel start. Program melakukan perulangan dari 0 hingga 1.000.000 menggunakan variabel i. Dalam setiap iterasi perulangan, variabel i akan ditambah satu. Program memanggil fungsi gettimeofday() untuk mendapatkan waktu saat ini dan menyimpannya ke variabel end. Program menghitung waktu yang diperlukan untuk melakukan perulangan dengan mengurangkan waktu awal dari waktu akhir. Waktu yang dihitung ini kemudian disimpan ke variabel cpu_time_used. Program melakukan hal yang sama seperti sebelumnya untuk variabel int j. Seperti yang dapat dilihat, waktu yang diperlukan untuk mengakses variabel register lebih kecil daripada waktu yang diperlukan untuk mengakses variabel integer. Ini karena variabel register disimpan di register CPU, yang dapat diakses lebih cepat daripada memori.

